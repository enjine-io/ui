{
  "langs": [
    "English",
    "Deutsch",
    "Español",
    "Français",
    "Português",
    "Русский",
    "Italiano"
  ],
  "codes": {
    "english": "en",
    "deutsch": "de",
    "español": "es",
    "français": "fr",
    "português": "pt",
    "русский": "ru",
    "italiano": "it"
  },
  "trans": {
    "title_124": {
      "en": " Layout ",
      "de": "",
      "es": ""
    },
    "text_126": {
      "en": "Adds a layout into your app. A layout is the basic ui component of an app. It is where you add other ui components such as buttons, textfields, checkboxes, list, images and many more.",
      "de": "",
      "es": ""
    },
    "text_127": {
      "en": "To add a layout, simply call the `addLayout` method of the `ui` object.",
      "de": "",
      "es": ""
    },
    "text_136": {
      "en": "There are 5 types of layouts: `\"Linear\"`, `\"Absolute\"`, `\"Frame\"`, `\"Slide\"` and `\"Card\"`. Layouts are transparent by default but you can set a background color or a background image. You can add child objects to the Layout by passing the layout as parent when initializing a control. By default, Layouts will auto-size to wrap and fit their contents but you have 3 more options as to how layout sizes within it's parent: `FillXY`, `FillX`, and `FillY`.",
      "de": "",
      "es": ""
    },
    "subtitle_138": {
      "en": "Linear Layouts",
      "de": "",
      "es": ""
    },
    "text_139": {
      "en": "Linear layouts are probably the most common type and are used to organize controls in the `Vertical` or `Horizontal` orientation on the screen. You can also pass alignment options. For vertical alignment you can pass `Top`, `VCenter`, and `Bottom`. For horizontal alignment you can pass `Left`, `Center`, and `Right`. These will align your children accordingly. For children spacing, see `childSpacing` property below.",
      "de": "",
      "es": ""
    },
    "subtitle_140": {
      "en": "Absolute Layouts",
      "de": "",
      "es": ""
    },
    "text_141": {
      "en": "Absolute layouts ignore all alignment options and allow the absolute positioning of controls by calling the `setPosition` method of each child control. However, you are encouraged to use linear layouts for most of your programs, unless it is absolutely necessary.",
      "de": "",
      "es": ""
    },
    "subtitle_143": {
      "en": "Frame Layouts",
      "de": "",
      "es": ""
    },
    "text_144": {
      "en": "Frame layouts are used to display objects in front or behind each other. Everytime a child control is added, the new control is placed in a new layer in front of the previously added control at the top left of the frame. You can then use `setPosition` method of the child control to position it relative to the frame.",
      "de": "",
      "es": ""
    },
    "subtitle_146": {
      "en": "Slide Layouts",
      "de": "",
      "es": ""
    },
    "text_147": {
      "en": "Slide layouts are used to display carousels or swipeable contents. The same as the Frame layout, this will add a new layer when a new control is added with a swipeable behaviour. You can pass alignment options to align your children within the Slide layout layer. Please note that `Vertical` and `Horizontal` options will be the direction of the swipe. If your parent layout is of type `Slide`, do not add `setOnTouch` callback handler in order for the slide layout to work perfectly.",
      "de": "",
      "es": ""
    },
    "subtitle_149": {
      "en": "Card Layouts",
      "de": "",
      "es": ""
    },
    "text_150": {
      "en": "Card layouts are used to display surfaces with elevation and a rounder corners to emphasize its contents. This type of layout has default values for padding. You can clear the padding by setting the `padding` property to `0`. If you want to use the material design card implementation, refer to the `Card` component.",
      "de": "",
      "es": ""
    },
    "heading_151": {
      "en": "Properties",
      "de": "",
      "es": ""
    },
    "text_152": {
      "en": "Here are the available setters and getters for the Layout Component.",
      "de": "",
      "es": ""
    },
    "heading_201": {
      "en": "Methods",
      "de": "",
      "es": ""
    },
    "text_202": {
      "en": "Here are the available methods for the Layout Component.",
      "de": "",
      "es": ""
    },
    "subtitle_203": {
      "en": "setChildMargins",
      "de": "",
      "es": ""
    },
    "text_204": {
      "en": "Sets a default margins for the children of the layout component.",
      "de": "",
      "es": ""
    },
    "subtitle_211": {
      "en": "show",
      "de": "",
      "es": ""
    },
    "text_212": {
      "en": "Makes the layout visible.",
      "de": "",
      "es": ""
    },
    "subtitle_214": {
      "en": "goto",
      "de": "",
      "es": ""
    },
    "text_215": {
      "en": "Transition to the given index.",
      "de": "",
      "es": ""
    },
    "tip_218": {
      "en": " Works only for Slide Layouts.",
      "de": "",
      "es": ""
    },
    "subtitle_219": {
      "en": "getCurrentSlide",
      "de": "",
      "es": ""
    },
    "text_220": {
      "en": "Returns the index of the current Slide Layout.",
      "de": "",
      "es": ""
    },
    "tip_223": {
      "en": " Works only for Slide Layouts.",
      "de": "",
      "es": ""
    },
    "subtitle_224": {
      "en": "next",
      "de": "",
      "es": ""
    },
    "text_225": {
      "en": "Transition to the next slide.",
      "de": "",
      "es": ""
    },
    "subtitle_227": {
      "en": "previous",
      "de": "",
      "es": ""
    },
    "text_228": {
      "en": "Transition to the previous slide.",
      "de": "",
      "es": ""
    },
    "subtitle_230": {
      "en": "setOnSlide",
      "de": "",
      "es": ""
    },
    "text_231": {
      "en": "Adds a callback function to be called when slide event is triggered.",
      "de": "",
      "es": ""
    },
    "subtitle_234": {
      "en": "getChildOrder",
      "de": "",
      "es": ""
    },
    "text_235": {
      "en": "Returns the index of the child from the layout children stack in order.",
      "de": "",
      "es": ""
    },
    "subtitle_239": {
      "en": "childToFront",
      "de": "",
      "es": ""
    },
    "text_240": {
      "en": "Move the child to the front.",
      "de": "",
      "es": ""
    },
    "tip_243": {
      "en": " Works only for absolute layout.",
      "de": "",
      "es": ""
    },
    "subtitle_244": {
      "en": "hasChild",
      "de": "",
      "es": ""
    },
    "text_245": {
      "en": "Check whether a component is a child of this layout.",
      "de": "",
      "es": ""
    },
    "subtitle_249": {
      "en": "removeChild",
      "de": "",
      "es": ""
    },
    "text_250": {
      "en": "Removes a child from this layout.",
      "de": "",
      "es": ""
    },
    "subtitle_253": {
      "en": "setOnTouch",
      "de": "",
      "es": ""
    },
    "text_254": {
      "en": "Adds a callback handler when the layout is touch.",
      "de": "",
      "es": ""
    },
    "subtitle_257": {
      "en": "setOnLongTouch",
      "de": "",
      "es": ""
    },
    "text_258": {
      "en": "Adds a callback handler when the layout is long touch. The touch timer is about 500 milliseconds.",
      "de": "",
      "es": ""
    },
    "subtitle_261": {
      "en": "clear",
      "de": "",
      "es": ""
    },
    "text_262": {
      "en": "Clear the content of the layout.",
      "de": "",
      "es": ""
    },
    "heading_264": {
      "en": "Examples",
      "de": "",
      "es": ""
    },
    "subtitle_31": {
      "en": "setOnContextMenu",
      "de": "",
      "es": ""
    },
    "text_32": {
      "en": "Adds a callback function on right click.",
      "de": "",
      "es": ""
    },
    "subtitle_35": {
      "en": "animate",
      "de": "",
      "es": ""
    },
    "text_36": {
      "en": "Animate the component.",
      "de": "",
      "es": ""
    },
    "subtitle_40": {
      "en": "setSize",
      "de": "",
      "es": ""
    },
    "text_41": {
      "en": "Sets the size of the component.",
      "de": "",
      "es": ""
    },
    "subtitle_45": {
      "en": "show",
      "de": "",
      "es": ""
    },
    "text_46": {
      "en": "Show the component.",
      "de": "",
      "es": ""
    },
    "subtitle_48": {
      "en": "hide",
      "de": "",
      "es": ""
    },
    "text_49": {
      "en": "Hide the component.",
      "de": "",
      "es": ""
    },
    "subtitle_51": {
      "en": "gone",
      "de": "",
      "es": ""
    },
    "text_52": {
      "en": "Destroy the component.",
      "de": "",
      "es": ""
    },
    "subtitle_54": {
      "en": "destroy",
      "de": "",
      "es": ""
    },
    "text_55": {
      "en": "Destroy the component.",
      "de": "",
      "es": ""
    },
    "subtitle_57": {
      "en": "setScale",
      "de": "",
      "es": ""
    },
    "text_58": {
      "en": "Sets the x and y scaling of the component.",
      "de": "",
      "es": ""
    },
    "subtitle_62": {
      "en": "getPosition",
      "de": "",
      "es": ""
    },
    "text_63": {
      "en": "Returns the position of the component. The return object is of the form `{left, top, right, bottom}`",
      "de": "",
      "es": ""
    },
    "subtitle_67": {
      "en": "setMargins",
      "de": "",
      "es": ""
    },
    "text_68": {
      "en": "Sets the margin of the component.",
      "de": "",
      "es": ""
    },
    "subtitle_75": {
      "en": "setPadding",
      "de": "",
      "es": ""
    },
    "text_76": {
      "en": "Sets the padding of the component's container.",
      "de": "",
      "es": ""
    },
    "subtitle_83": {
      "en": "setPosition",
      "de": "",
      "es": ""
    },
    "text_84": {
      "en": "Sets the position of the component relative to its parent dimensions.",
      "de": "",
      "es": ""
    },
    "subtitle_89": {
      "en": "setBorder",
      "de": "",
      "es": ""
    },
    "text_90": {
      "en": "Sets the border line for the component container.",
      "de": "",
      "es": ""
    },
    "subtitle_98": {
      "en": "setCornerRadius",
      "de": "",
      "es": ""
    },
    "text_99": {
      "en": "Sets the corner radius of the component.",
      "de": "",
      "es": ""
    },
    "subtitle_106": {
      "en": "bringForward",
      "de": "",
      "es": ""
    },
    "text_107": {
      "en": "Bring this component forward by a given z-index.",
      "de": "",
      "es": ""
    },
    "subtitle_110": {
      "en": "sendBackward",
      "de": "",
      "es": ""
    },
    "text_111": {
      "en": "Bring this component backward by a given z-index.",
      "de": "",
      "es": ""
    }
  }
}